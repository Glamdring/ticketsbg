package com.tickets.model;

import java.io.Serializable;
import java.util.Iterator;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

/**
 * Tickets generated by hbm2java
 */
@Entity
@Table(name = "orders")
@NamedQueries({
 @NamedQuery(name = "Order.getTimeouted", query = "SELECT o FROM Order o JOIN o.tickets t WHERE t.committed=false")
})
public class Order implements Serializable {

    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    private int id;

    @OneToMany(cascade=CascadeType.ALL)
    @LazyCollection(LazyCollectionOption.FALSE)
    private List<Ticket> tickets;

    @Column
    private String languageCode;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public List<Ticket> getTickets() {
        return tickets;
    }

    public void setTickets(List<Ticket> tickets) {
        this.tickets = tickets;
    }

    public String getLanguageCode() {
        return languageCode;
    }

    public void setLanguageCode(String languageCode) {
        this.languageCode = languageCode;
    }

    // the two methods below actually use the fact that all tickets within the
    // order have the same properties. This is so because the order is an
    // artificial holder of the purchased tickets

    public boolean paymentInitiated() {
        for (Ticket ticket : tickets) {
            if (ticket.isPaymentInProcess()) {
                return true;
            }
        }
        return false;
    }

    public PaymentMethod getPaymentMethod() {
        Iterator<Ticket> it = tickets.iterator();
        if (it.hasNext()) {
            return it.next().getPaymentMethod();
        }
        return null;
    }
}
